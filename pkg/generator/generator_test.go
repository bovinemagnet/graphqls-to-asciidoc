package generator

import (
	"bytes"
	"io"
	"os"
	"strings"
	"testing"

	"github.com/vektah/gqlparser/v2/ast"

	"github.com/bovinemagnet/graphqls-to-asciidoc/pkg/config"
)

// captureOutput captures stdout during function execution
func captureOutput(f func()) string {
	old := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w

	f()

	w.Close()
	os.Stdout = old

	var buf bytes.Buffer
	io.Copy(&buf, r)
	return buf.String()
}

func TestNew(t *testing.T) {
	cfg := &config.Config{SchemaFile: "test.graphql"}
	schema := &ast.Schema{Types: make(map[string]*ast.Definition)}

	gen := New(cfg, schema)

	if gen == nil {
		t.Fatal("New() returned nil")
	}
	if gen.config != cfg {
		t.Error("Config not set correctly")
	}
	if gen.schema != schema {
		t.Error("Schema not set correctly")
	}
}

func TestGeneratorPrintHeader(t *testing.T) {
	cfg := &config.Config{SchemaFile: "test/schema.graphql"}
	schema := &ast.Schema{Types: make(map[string]*ast.Definition)}
	gen := New(cfg, schema)

	output := captureOutput(func() {
		gen.printHeader()
	})

	expectedContains := []string{
		"= GraphQL Documentation",
		":toc: left",
		":revdate:",
		":commandline:",
		":sourceFile: test/schema.graphql",
		":reproducible:",
		":page-partial:",
		":sect-anchors:",
		":table-caption!:",
		":table-stripes: even",
		":pdf-page-size: A4",
		":tags: api, GraphQL, nodes, types, query",
		"[IMPORTANT]",
		"This is automatically generated",
		"Do not edit this file directly",
	}

	for _, expected := range expectedContains {
		if !strings.Contains(output, expected) {
			t.Errorf("Header should contain %q, but doesn't. Output:\n%s", expected, output)
		}
	}
}

func TestGenerateWithEmptySchema(t *testing.T) {
	cfg := config.NewConfig()
	cfg.SchemaFile = "empty.graphql"
	schema := &ast.Schema{Types: make(map[string]*ast.Definition)}
	gen := New(cfg, schema)

	output := captureOutput(func() {
		err := gen.Generate()
		if err != nil {
			t.Errorf("Generate() returned error: %v", err)
		}
	})

	// Should at least contain header
	if !strings.Contains(output, "= GraphQL Documentation") {
		t.Error("Output should contain header")
	}

	// Should contain placeholder messages for empty sections
	expectedPlaceholders := []string{
		"Enums section - implementation in progress",
		"Inputs section - implementation in progress", 
		"Directives section - implementation in progress",
		"Scalars section - implementation in progress",
	}

	for _, placeholder := range expectedPlaceholders {
		if !strings.Contains(output, placeholder) {
			t.Errorf("Output should contain placeholder %q", placeholder)
		}
	}
	
	// Should NOT contain mutation/subscription sections since schema.Mutation and schema.Subscription are nil
	notExpectedSections := []string{
		"== Mutations",
		"== Subscriptions",
	}
	
	for _, section := range notExpectedSections {
		if strings.Contains(output, section) {
			t.Errorf("Output should NOT contain section %q when schema doesn't define it", section)
		}
	}
}

func TestGenerateWithQuerySchema(t *testing.T) {
	cfg := config.NewConfig()
	cfg.SchemaFile = "query.graphql"

	// Create a simple schema with a Query type
	queryDef := &ast.Definition{
		Kind: ast.Object,
		Name: "Query",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name:        "hello",
				Description: "A simple hello query",
				Type:        &ast.Type{NamedType: "String"},
			},
			&ast.FieldDefinition{
				Name:        "user",
				Description: "Get a user by ID",
				Type:        &ast.Type{NamedType: "User"},
				Arguments: ast.ArgumentDefinitionList{
					&ast.ArgumentDefinition{
						Name: "id",
						Type: &ast.Type{NamedType: "ID", NonNull: true},
					},
				},
			},
		},
	}

	userDef := &ast.Definition{
		Kind: ast.Object,
		Name: "User",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name: "id",
				Type: &ast.Type{NamedType: "ID", NonNull: true},
			},
			&ast.FieldDefinition{
				Name: "name",
				Type: &ast.Type{NamedType: "String"},
			},
		},
	}

	schema := &ast.Schema{
		Query: queryDef,
		Types: map[string]*ast.Definition{
			"Query": queryDef,
			"User":  userDef,
		},
	}

	gen := New(cfg, schema)

	output := captureOutput(func() {
		err := gen.Generate()
		if err != nil {
			t.Errorf("Generate() returned error: %v", err)
		}
	})

	// Check for query-specific content
	expectedQueryContent := []string{
		"== Query",
		"hello",
		"A simple hello query",
		"user",
		"Get a user by ID",
		"// tag::query-hello[]",
		"// tag::query-user[]",
		"[[query_hello]]",
		"[[query_user]]",
		"*Query Name:* _hello_",
		"*Query Name:* _user_",
		"*Return:* `String`",
		"*Return:* <<User,`User`>>",
	}

	for _, expected := range expectedQueryContent {
		if !strings.Contains(output, expected) {
			t.Errorf("Query output should contain %q, but doesn't", expected)
		}
	}
}

func TestGenerateConfigFlags(t *testing.T) {
	// Create a schema with all types
	schema := createTestSchema()

	testCases := []struct {
		name           string
		configModifier func(*config.Config)
		shouldContain  []string
		shouldNotContain []string
	}{
		{
			name: "queries disabled",
			configModifier: func(cfg *config.Config) {
				cfg.IncludeQueries = false
			},
			shouldNotContain: []string{"== Query"},
		},
		{
			name: "mutations disabled",
			configModifier: func(cfg *config.Config) {
				cfg.IncludeMutations = false
			},
			shouldNotContain: []string{"== Mutations"},
		},
		{
			name: "types disabled",
			configModifier: func(cfg *config.Config) {
				cfg.IncludeTypes = false
			},
			shouldNotContain: []string{"== Types"},
		},
		{
			name: "enums disabled",
			configModifier: func(cfg *config.Config) {
				cfg.IncludeEnums = false
			},
			shouldNotContain: []string{"== Enums"},
		},
		{
			name: "inputs disabled",
			configModifier: func(cfg *config.Config) {
				cfg.IncludeInputs = false
			},
			shouldNotContain: []string{"== Inputs"},
		},
		{
			name: "directives disabled",
			configModifier: func(cfg *config.Config) {
				cfg.IncludeDirectives = false
			},
			shouldNotContain: []string{"== Directives"},
		},
		{
			name: "scalars disabled",
			configModifier: func(cfg *config.Config) {
				cfg.IncludeScalars = false
			},
			shouldNotContain: []string{"== Scalars"},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			cfg := config.NewConfig()
			cfg.SchemaFile = "test.graphql"
			tc.configModifier(cfg)

			gen := New(cfg, schema)

			output := captureOutput(func() {
				gen.Generate()
			})

			for _, expected := range tc.shouldContain {
				if !strings.Contains(output, expected) {
					t.Errorf("Output should contain %q", expected)
				}
			}

			for _, notExpected := range tc.shouldNotContain {
				if strings.Contains(output, notExpected) {
					t.Errorf("Output should NOT contain %q", notExpected)
				}
			}
		})
	}
}

func TestGenerateQueryFieldWithArguments(t *testing.T) {
	cfg := config.NewConfig()
	cfg.SchemaFile = "test.graphql"

	// Create query with arguments
	queryDef := &ast.Definition{
		Kind: ast.Object,
		Name: "Query",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name:        "searchUsers",
				Description: "Search for users",
				Type:        &ast.Type{Elem: &ast.Type{NamedType: "User"}},
				Arguments: ast.ArgumentDefinitionList{
					&ast.ArgumentDefinition{
						Name:        "query",
						Description: "Search query",
						Type:        &ast.Type{NamedType: "String", NonNull: true},
					},
					&ast.ArgumentDefinition{
						Name:        "limit",
						Description: "Result limit",
						Type:        &ast.Type{NamedType: "Int"},
					},
				},
			},
		},
	}

	userDef := &ast.Definition{
		Kind: ast.Object,
		Name: "User",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name: "name",
				Type: &ast.Type{NamedType: "String"},
			},
		},
	}

	schema := &ast.Schema{
		Query: queryDef,
		Types: map[string]*ast.Definition{
			"Query": queryDef,
			"User":  userDef,
		},
	}

	gen := New(cfg, schema)

	output := captureOutput(func() {
		gen.Generate()
	})

	expectedContent := []string{
		"searchUsers",
		"Search for users", 
		"query: `String!` , <1>",
		"limit: `Int` <2>",
		"): [<<User,`User`>>] <3>",
		".Arguments",
		"`query : String!`",
		"`limit : Int`",
	}

	for _, expected := range expectedContent {
		if !strings.Contains(output, expected) {
			t.Errorf("Output should contain %q, but doesn't. Output:\n%s", expected, output)
		}
	}
}

func TestGenerateTypes(t *testing.T) {
	cfg := config.NewConfig()
	cfg.SchemaFile = "test.graphql"

	// Create schema with custom types
	userDef := &ast.Definition{
		Kind:        ast.Object,
		Name:        "User",
		Description: "A user in the system",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name:        "id",
				Description: "User ID",
				Type:        &ast.Type{NamedType: "ID", NonNull: true},
			},
			&ast.FieldDefinition{
				Name:        "email",
				Description: "User email address",
				Type:        &ast.Type{NamedType: "String"},
			},
		},
	}

	schema := &ast.Schema{
		Types: map[string]*ast.Definition{
			"User": userDef,
		},
	}

	gen := New(cfg, schema)

	output := captureOutput(func() {
		gen.Generate()
	})

	expectedContent := []string{
		"== Types",
		"// tag::type-User[]",
		"[[type_user]]",
		"=== User",
		"A user in the system",
		".type: User",
		"[options=\"header\"]",
		"|===",
		"| Type | Field | Description",
		"`ID!`", "id", "User ID",
		"`String`", "email", "User email address",
		"// end::type-User[]",
	}

	for _, expected := range expectedContent {
		if !strings.Contains(output, expected) {
			t.Errorf("Type output should contain %q, but doesn't", expected)
		}
	}
}

func TestIsBuiltInType(t *testing.T) {
	testCases := []struct {
		typeName string
		expected bool
	}{
		{"String", true},
		{"Int", true},
		{"Float", true},
		{"Boolean", true},
		{"ID", true},
		{"Query", true},
		{"Mutation", true},
		{"Subscription", true},
		{"User", false},
		{"CustomType", false},
		{"DateTime", false},
	}

	for _, tc := range testCases {
		t.Run(tc.typeName, func(t *testing.T) {
			result := isBuiltInType(tc.typeName)
			if result != tc.expected {
				t.Errorf("isBuiltInType(%q) = %v; expected %v", tc.typeName, result, tc.expected)
			}
		})
	}
}

func TestGetTypeFieldsTableString(t *testing.T) {
	cfg := config.NewConfig()
	schema := &ast.Schema{Types: make(map[string]*ast.Definition)}
	gen := New(cfg, schema)

	userDef := &ast.Definition{
		Kind: ast.Object,
		Name: "User",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name:        "id",
				Description: "User identifier",
				Type:        &ast.Type{NamedType: "ID", NonNull: true},
			},
			&ast.FieldDefinition{
				Name:        "name",
				Description: "User full name",
				Type:        &ast.Type{NamedType: "String"},
			},
		},
	}

	definitionsMap := map[string]*ast.Definition{
		"User": userDef,
	}

	result, err := gen.getTypeFieldsTableString(userDef, definitionsMap)
	if err != nil {
		t.Fatalf("getTypeFieldsTableString() returned error: %v", err)
	}

	expectedContent := []string{
		".type: User",
		"[options=\"header\"]",
		"|===",
		"| Type | Field | Description",
		"`ID!`", "id", "User identifier",
		"`String`", "name", "User full name",
	}

	for _, expected := range expectedContent {
		if !strings.Contains(result, expected) {
			t.Errorf("Table should contain %q, but doesn't. Result:\n%s", expected, result)
		}
	}
}

func TestExcludeInternal(t *testing.T) {
	cfg := config.NewConfig()
	cfg.SchemaFile = "test.graphql"
	cfg.ExcludeInternal = true

	queryDef := &ast.Definition{
		Kind: ast.Object,
		Name: "Query",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name:        "publicQuery",
				Description: "A public query",
				Type:        &ast.Type{NamedType: "String"},
			},
			&ast.FieldDefinition{
				Name:        "internalQuery",
				Description: "INTERNAL: An internal query",
				Type:        &ast.Type{NamedType: "String"},
			},
		},
	}

	schema := &ast.Schema{
		Query: queryDef,
		Types: map[string]*ast.Definition{
			"Query": queryDef,
		},
	}

	gen := New(cfg, schema)

	output := captureOutput(func() {
		gen.Generate()
	})

	// Should contain public query
	if !strings.Contains(output, "publicQuery") {
		t.Error("Output should contain public query")
	}
	if !strings.Contains(output, "A public query") {
		t.Error("Output should contain public query description")
	}

	// Should NOT contain internal query
	if strings.Contains(output, "internalQuery") {
		t.Error("Output should NOT contain internal query when ExcludeInternal is true")
	}
	if strings.Contains(output, "INTERNAL: An internal query") {
		t.Error("Output should NOT contain internal query description when ExcludeInternal is true")
	}
}

// Helper function to create a test schema with various types
func createTestSchema() *ast.Schema {
	queryDef := &ast.Definition{
		Kind: ast.Object,
		Name: "Query",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name: "hello",
				Type: &ast.Type{NamedType: "String"},
			},
		},
	}

	mutationDef := &ast.Definition{
		Kind: ast.Object,
		Name: "Mutation",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name: "createUser",
				Type: &ast.Type{NamedType: "User"},
			},
		},
	}

	userDef := &ast.Definition{
		Kind: ast.Object,
		Name: "User",
		Fields: ast.FieldList{
			&ast.FieldDefinition{
				Name: "id",
				Type: &ast.Type{NamedType: "ID"},
			},
		},
	}

	return &ast.Schema{
		Query:    queryDef,
		Mutation: mutationDef,
		Types: map[string]*ast.Definition{
			"Query":    queryDef,
			"Mutation": mutationDef,
			"User":     userDef,
		},
	}
}