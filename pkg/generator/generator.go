package generator

import (
	"fmt"
	"os"
	"sort"
	"strings"
	"text/template"
	"time"

	"github.com/vektah/gqlparser/v2/ast"

	"github.com/bovinemagnet/graphqls-to-asciidoc/pkg/changelog"
	"github.com/bovinemagnet/graphqls-to-asciidoc/pkg/config"
	"github.com/bovinemagnet/graphqls-to-asciidoc/pkg/parser"
	"github.com/bovinemagnet/graphqls-to-asciidoc/pkg/templates"
)

// Generator handles AsciiDoc generation from GraphQL schemas
type Generator struct {
	config *config.Config
	schema *ast.Schema
}

// New creates a new Generator instance
func New(cfg *config.Config, schema *ast.Schema) *Generator {
	return &Generator{
		config: cfg,
		schema: schema,
	}
}

// Generate generates the complete AsciiDoc documentation
func (g *Generator) Generate() error {
	// Print header
	g.printHeader()

	// Create definitions map for type processing
	definitionsMap := make(map[string]*ast.Definition)
	for _, def := range g.schema.Types {
		definitionsMap[def.Name] = def
	}

	// Sort definitions
	sortedDefs := make([]*ast.Definition, 0, len(g.schema.Types))
	for _, def := range g.schema.Types {
		sortedDefs = append(sortedDefs, def)
	}
	sort.Slice(sortedDefs, func(i, j int) bool {
		return sortedDefs[i].Name < sortedDefs[j].Name
	})

	// Generate sections based on configuration
	if g.config.IncludeQueries && g.schema.Query != nil {
		g.generateQueries(definitionsMap)
	}

	if g.config.IncludeMutations && g.schema.Mutation != nil {
		g.generateMutations(definitionsMap)
	}

	if g.config.IncludeSubscriptions && g.schema.Subscription != nil {
		g.generateSubscriptions(definitionsMap)
	}

	if g.config.IncludeTypes {
		g.generateTypes(sortedDefs, definitionsMap)
	}

	if g.config.IncludeEnums {
		g.generateEnums(sortedDefs, definitionsMap)
	}

	if g.config.IncludeInputs {
		g.generateInputs(sortedDefs, definitionsMap)
	}

	if g.config.IncludeDirectives {
		g.generateDirectives(sortedDefs)
	}

	if g.config.IncludeScalars {
		g.generateScalars(sortedDefs)
	}

	return nil
}

// printHeader prints the AsciiDoc document header
func (g *Generator) printHeader() {
	fmt.Println("= GraphQL Documentation")
	fmt.Println(":toc: left")
	fmt.Printf(":revdate: %s\n", time.Now().Format("Mon, 02 Jan 2006 15:04:05 MST"))
	fmt.Printf(":commandline: %s\n", strings.Join(os.Args, " "))
	fmt.Printf(":sourceFile: %s\n", g.config.SchemaFile)
	fmt.Println(":reproducible:")
	fmt.Println(":page-partial:")
	fmt.Println(":sect-anchors:")
	fmt.Println(":table-caption!:")
	fmt.Println(":table-stripes: even")
	fmt.Println(":pdf-page-size: A4")
	fmt.Println(":tags: api, GraphQL, nodes, types, query")
	fmt.Println()
	fmt.Println()
	fmt.Println("[IMPORTANT]")
	fmt.Println("====")
	fmt.Printf("This is automatically generated from the schema file `%s`. +\n", g.config.SchemaFile)
	fmt.Println("Do not edit this file directly. +")
	fmt.Println("Last generated _{revdate}_")
	fmt.Println("====")
	fmt.Println()
}

// generateQueries generates the queries section
func (g *Generator) generateQueries(definitionsMap map[string]*ast.Definition) {
	if g.schema.Query == nil {
		return
	}

	fmt.Println("== Query")
	fmt.Println()
	fmt.Println()
	if g.schema.Query.Description != "" {
		fmt.Println(parser.ProcessDescription(g.schema.Query.Description))
	}

	for _, f := range g.schema.Query.Fields {
		// Skip internal queries if configured
		if g.config.ExcludeInternal && strings.Contains(f.Description, "INTERNAL") {
			continue
		}

		g.generateQueryField(f, definitionsMap)
	}
}

// generateQueryField generates a single query field
func (g *Generator) generateQueryField(field *ast.FieldDefinition, definitionsMap map[string]*ast.Definition) {
	fmt.Printf("// tag::query-%s[]\n", field.Name)
	fmt.Println()
	fmt.Printf("[[query_%s]]\n", strings.ToLower(field.Name))
	fmt.Printf("=== %s\n", field.Name)
	fmt.Println()
	fmt.Println()

	// Process description and extract changelog
	processedDesc, changelog := changelog.ProcessWithChangelog(field.Description, parser.ProcessDescription)

	fmt.Printf("// tag::method-description-%s[]\n", field.Name)
	if processedDesc != "" {
		fmt.Println(processedDesc)
	}
	fmt.Printf("// end::method-description-%s[]\n", field.Name)
	fmt.Println()

	// Generate method signature
	fmt.Printf("// tag::method-signature-%s[]\n", field.Name)
	fmt.Printf(".query: %s\n", field.Name)
	fmt.Println("[source, kotlin]")
	fmt.Println("----")
	fmt.Printf("%s(\n", field.Name)

	// Generate arguments
	for i, arg := range field.Arguments {
		argType := parser.ProcessTypeName(arg.Type.String(), definitionsMap)
		fmt.Printf("  %s: %s", arg.Name, argType)
		if i < len(field.Arguments)-1 {
			fmt.Print(" ,")
		}
		fmt.Printf(" <%d> \n", i+1)
	}

	fmt.Printf("): %s <%d>\n", parser.ProcessTypeName(field.Type.String(), definitionsMap), len(field.Arguments)+1)
	fmt.Println("----")
	fmt.Printf("// end::method-signature-%s[]\n", field.Name)
	fmt.Println()

	// Add other sections...
	fmt.Printf("// tag::method-args-%s[]\n", field.Name)
	fmt.Printf("// end::method-args-%s[]\n", field.Name)
	fmt.Println()

	fmt.Printf("// tag::query-name-%s[]\n", field.Name)
	fmt.Printf("*Query Name:* _%s_\n", field.Name)
	fmt.Printf("// end::query-name-%s[]\n", field.Name)
	fmt.Println()

	fmt.Printf("// tag::query-return-%s[]\n", field.Name)
	fmt.Printf("*Return:* %s\n", parser.ProcessTypeName(field.Type.String(), definitionsMap))
	fmt.Printf("// end::query-return-%s[]\n", field.Name)
	fmt.Println()

	if len(field.Arguments) > 0 {
		fmt.Printf("// tag::arguments-%s[]\n", field.Name)
		fmt.Println(".Arguments")
		for _, arg := range field.Arguments {
			fmt.Printf("* `%s : %s`\n", arg.Name, arg.Type.String())
		}
		fmt.Printf("// end::arguments-%s[]\n", field.Name)
		fmt.Println()
	}

	// Add changelog section
	if changelog != "" {
		fmt.Printf("// tag::query-changelog-%s[]\n", field.Name)
		fmt.Print(changelog)
		fmt.Printf("// end::query-changelog-%s[]\n", field.Name)
		fmt.Println()
	}

	fmt.Printf("// end::query-%s[]\n", field.Name)
	fmt.Println()
}

// Placeholder implementations for other generators
func (g *Generator) generateMutations(definitionsMap map[string]*ast.Definition) {
	// Implementation would go here - simplified for now
	fmt.Println("== Mutations")
	fmt.Println()
	fmt.Println("[NOTE]")
	fmt.Println("====")
	fmt.Println("Mutations section - implementation in progress")
	fmt.Println("====")
	fmt.Println()
}

func (g *Generator) generateSubscriptions(definitionsMap map[string]*ast.Definition) {
	// Implementation would go here - simplified for now
	fmt.Println("== Subscriptions")
	fmt.Println()
	fmt.Println("[NOTE]")
	fmt.Println("====")
	fmt.Println("Subscriptions section - implementation in progress")
	fmt.Println("====")
	fmt.Println()
}

func (g *Generator) generateTypes(sortedDefs []*ast.Definition, definitionsMap map[string]*ast.Definition) {
	var typeInfos []TypeInfo

	for _, t := range sortedDefs {
		if t.Kind == ast.Object && !isBuiltInType(t.Name) {
			// Generate fields table
			fieldsTableString, err := g.getTypeFieldsTableString(t, definitionsMap)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error generating fields table for type %s: %v\n", t.Name, err)
				fieldsTableString = "[ERROR generating fields table]"
			}

			// Process type description and extract changelog
			processedDesc, changelog := changelog.ProcessWithChangelog(t.Description, parser.ProcessDescription)

			typeInfo := TypeInfo{
				Name:        t.Name,
				Kind:        string(t.Kind),
				AnchorName:  "type_" + parser.CamelToSnake(t.Name),
				Description: processedDesc,
				FieldsTable: fieldsTableString,
				IsInterface: t.Kind == ast.Interface,
				Changelog:   changelog,
			}
			typeInfos = append(typeInfos, typeInfo)
		}
	}

	if len(typeInfos) > 0 {
		data := struct {
			TypesTag string
			Types    []TypeInfo
		}{
			TypesTag: "== Types",
			Types:    typeInfos,
		}

		tmpl, err := template.New("types").Funcs(template.FuncMap{
			"printAsciiDocTagsTmpl": func(s string) string { return s },
		}).Parse(templates.TypeSectionTemplate)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error parsing type section template: %v\n", err)
			return
		}

		err = tmpl.Execute(os.Stdout, data)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error executing type section template: %v\n", err)
		}
	}
}

func (g *Generator) generateEnums(sortedDefs []*ast.Definition, definitionsMap map[string]*ast.Definition) {
	// Implementation would go here - simplified for now
	fmt.Println("== Enums")
	fmt.Println()
	fmt.Println("[NOTE]")
	fmt.Println("====")
	fmt.Println("Enums section - implementation in progress")
	fmt.Println("====")
	fmt.Println()
}

func (g *Generator) generateInputs(sortedDefs []*ast.Definition, definitionsMap map[string]*ast.Definition) {
	// Implementation would go here - simplified for now
	fmt.Println("== Inputs")
	fmt.Println()
	fmt.Println("[NOTE]")
	fmt.Println("====")
	fmt.Println("Inputs section - implementation in progress")
	fmt.Println("====")
	fmt.Println()
}

func (g *Generator) generateDirectives(sortedDefs []*ast.Definition) {
	// Implementation would go here - simplified for now
	fmt.Println("== Directives")
	fmt.Println()
	fmt.Println("[NOTE]")
	fmt.Println("====")
	fmt.Println("Directives section - implementation in progress")
	fmt.Println("====")
	fmt.Println()
}

func (g *Generator) generateScalars(sortedDefs []*ast.Definition) {
	// Implementation would go here - simplified for now
	fmt.Println("== Scalars")
	fmt.Println()
	fmt.Println("[NOTE]")
	fmt.Println("====")
	fmt.Println("Scalars section - implementation in progress")
	fmt.Println("====")
	fmt.Println()
}

// Helper functions
func (g *Generator) getTypeFieldsTableString(t *ast.Definition, definitionsMap map[string]*ast.Definition) (string, error) {
	var builder strings.Builder

	builder.WriteString(".type: " + t.Name + "\n")
	builder.WriteString("[options=\"header\"]\n")
	builder.WriteString("|===\n")
	builder.WriteString("| Type | Field | Description \n")

	for _, f := range t.Fields {
		typeName := parser.ProcessTypeName(f.Type.String(), definitionsMap)
		processedDesc, changelog := changelog.ProcessWithChangelog(f.Description, parser.ProcessDescription)

		data := FieldData{
			Type:            typeName,
			Name:            f.Name,
			Description:     processedDesc,
			RequiredOrArray: strings.Contains(typeName, "!") || strings.Contains(typeName, "["),
			Changelog:       changelog,
		}

		tmpl, err := template.New("field").Funcs(template.FuncMap{
			"processDescription": parser.ProcessDescription,
		}).Parse(templates.FieldTemplate)
		if err != nil {
			return "", err
		}

		err = tmpl.Execute(&builder, data)
		if err != nil {
			return "", err
		}
	}

	builder.WriteString("|===\n")
	return builder.String(), nil
}

func isBuiltInType(typeName string) bool {
	builtInTypes := map[string]bool{
		"String":  true,
		"Int":     true,
		"Float":   true,
		"Boolean": true,
		"ID":      true,
		"Query":   true,
		"Mutation": true,
		"Subscription": true,
	}
	return builtInTypes[typeName]
}