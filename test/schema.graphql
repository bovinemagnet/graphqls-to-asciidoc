"""
A tweet
This schema came from an example found here https://github.com/marmelab/GraphQL-example/blob/master/schema.graphql
"""
type Tweet {
    """
    The tweet ID
    """
    id: ID!
    """
    The tweet text. No more than 140 characters!
    """
    body: String
    """
    When the tweet was published
    """
    date: Date
    """
    Who published the tweet
    """
    Author: User
    """
    Views, retweets, likes, etc
    """
    Stats: Stat
    """
    The tweet's sentiment
    """
    sentiment: Sentiment
    """
    This is to test the version number of this field.

    add.version: 1.0.0
    update.version: 1.2.3
    update.version: 2.0.5
    deprecated.version: 2.6.0
    removed.version: 2.7.8
    """
    newField: String
}

"""
A Twitter user. They can publish tweets, and have followers
"""
type User {
    """
    The user ID
    """
    id: ID!
    """
    The user's Twitter handle
    """
    username: String
    """
    The user's real name
    """
    first_name: String
    """
    The user's real name
    """
    last_name: String
    """
    The user's real full name
    """
    full_name: String
    """
    The user's name, that is deprecated
    """
    name: String @deprecated
    """
    The user's avatar URL
    """
    avatar_url: Url
}

"""
Stats about a tweet, such as number of views, likes, retweets, etc
"""
type Stat {
    """
    The number of views
    """
    views: Int
    """
    The number of likes
    """
    likes: Int
    """
    The number of retweets
    """
    retweets: Int
    """
    The number of responses
    """
    responses: Int
}

"""
A notification for a user
"""
type Notification {
    """
    The notification ID
    """
    id: ID
    """
    The notification date
    """
    date: Date
    """
    The notification type
    """
    type: String
}

"""
Meta information about the query
"""
type Meta {
    """
    The total number of items
    """
    count: Int
}

"""
An example of a type with a changelog in the type definition as well as on the fieds.

add.version: 1.0.0
update.version: 1.2.3
update.version: 2.0.5
"""
type CLogExample {
    """
    The total number of items
    """
    count: Int

    """
    This was updated
    """
    up: String

    """
    This was deprecated

    @deprecated("testing this out")

    add.version: 1.0.0
    update.version: 1.2.3
    deprecated.version: 2.6.0
    """
    dep: String

    """
    This was new

    add.version: 2.6.0
    """
    new: String
}

"""
A message
"""
type Message {
    """
    The message's content
    """
    content: String
    """
    The message's author
    """
    author: String
}

"""
Example of an input type
"""
input MessageInput {
    """
    The message's content
    """
    content: String @length(max: 31)
    """
    The message's author
    """
    author: String @length(max: 31)
}

"""
An example of a type with a changelog in the type definition as well as on the fieds.

add.version: 1.0.0
update.version: 1.2.3
update.version: 2.0.5
"""
input CLogExampleInput {
    """
    The total number of items
    """
    count: Int

    """
    This was updated
    """
    up: String

    """
    This was deprecated

    @deprecated("testing this out")

    add.version: 1.0.0
    update.version: 1.2.3
    deprecated.version: 2.6.0
    """
    dep: String

    """
    This was new

    add.version: 2.6.0
    """
    new: String
}

"""
# tag::SCALAR_URL_DES[]
A URL string scalar
# end::SCALAR_URL_DES[]
"""
scalar Url

"""
# tag::SCALAR_DATE_DES[]
A date string scalar
# end::SCALAR_DATE_DES[]
"""
scalar Date

"""
# tag::SENTIMENT_DES[]
A sentiment enum

.Values
- `HAPPY`: A happy one
- `SAD`: A sad one
- `INDIFFERENT`: An indifferent one
- `OTHER`: Something else

This is just to demonstrate how to document an enum with asciidoc tags in the description.

# end::SENTIMENT_DES[]
"""
enum Sentiment {
    """
    The tweet is happy.
    """
    HAPPY
    """
    The tweet is sad.
    """
    SAD
    """
    The tweet is indifferent.
    """
    INDIFFERENT
    """
    The tweet is something else.
    """
    OTHER
}

"""
# tag::ENUM_DIRECTION_DES[]

The direction UP or Down

# end::ENUM_DIRECTION_DES[]
"""
enum Direction {
    """
    The Up direction.
    """
    UP
    """
    The Down direction.
    """
    DOWN
}

"""
The root query
"""
type Query {
    """
    Get a tweet by its ID
    .Arguments:
    - `id`: the id of the tweet to search by.
    """
    Tweet(id: ID!): Tweet
    """
    Get a list of tweets, remember that it is `2024-01-08` for testing dates in the conversion.
    """
    Tweets(
        limit: Int!
        skip: Int
        sort_field: String
        sort_order: String
    ): [Tweet]
    """
    Get meta information about the list of tweets. This tests the list to query options.

    - `limit`:  the max numer; _Required_
    - `skip`: how many to skip
    - `sort_field`: what to sort on
    - `sort_order`: which direction to do you want to sort.
    - _RETURNS_: an array of `Tweet`.
    """
    TweetsMeta: Meta
    """
    Get a user by its ID
    """
    User(id: ID!): User
    """
    Get a list of users
    """
    Notifications(limit: Int): [Notification]
    """
    Get meta information about the list of notifications
    """
    NotificationsMeta: Meta
    """
    Get a tweet's sentiment by its ID
    """
    TweetSentiment(id: ID!): Sentiment

    """
    1: Get a tweet's sentiment by its IDs (plural)
    """
    TweetSentiments1(id: [ID]): [Sentiment]

    """
    2: Get a tweet's sentiment by its IDs (plural)
    """
    TweetSentiments2(id: [ID!]): [Sentiment]

    """
    3: Get a tweet's sentiment by its IDs (plural)
    """
    TweetSentiments3(id: [ID]!): [Sentiment]

    """
    4: Get a tweet's sentiment by its IDs (plural)
    """
    TweetSentiments4(id: [ID!]!): [Sentiment]

    # tag::graphql_query_tweetSentiments5[]
    """
    **INTERNAL**:

    An example of an internal query.

    - `id`: A list of id's that are _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentiments5(id: [ID!]!): [Sentiment]
    # end::graphql_query_tweetSentiments5[]

    # tag::graphql_query_tweetSentimentsDep[]
    """
    **INTERNAL**: Simple endpoint to test it is functioning.

    **PERMISSION**: PRIVATE-ONLY

    An example of an internal query.
    @deprecated(reason: "Internal test")
    - `id`: A list of id's that are _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentimentsDep(id: [ID!]!): [Sentiment]
    # end::graphql_query_tweetSentimentsDep[]
    #
    #
    # tag::graphql_query_tweetSentimentsCode[]
    """
    An example of an internal query.

    ```graphql
    tweetSentimentCode(123) {
       Sentiment
    }
    ```

    @deprecated(reason: "Internal test")
    - `id`: An id that is _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentimentCode(id: ID!): Sentiment
    # end::graphql_query_tweetSentimentsCode[]

    # tag::graphql_query_tweetSentimentsACode[]
    """
    An example of an internal query.

    [source,graphql]
    ----
    tweetSentimentACode(123) {
       Sentiment
    }
    ----

    - `id`: An id that are _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentimentACode(id: ID!): Sentiment
    # end::graphql_query_tweetSentimentsACode[]

    # tag::graphql_query_tweetSentimentsDeprecate[]
    """
    An example of an internal query.

    @deprecated(reason: "Internal test")

    add.version: 1.0.0
    update.version: 1.2.3
    update.version: 2.0.5
    deprecated.version: 2.6.0
    removed.version: 2.7.8

    - `id`: An id that are _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentimentDep(id: ID!): Sentiment
    # end::graphql_query_tweetSentimentsDeprecate[]
}

# tag::MUTATIONs[]
"""
The root mutation
"""
type Mutation {
    # tag::MUTATION_CREATE_TWEET[]
    """
    Create a new tweet
    """
    createTweet(body: String): Tweet
    # end::MUTATION_CREATE_TWEET[]

    # tag::MUTATION_DELETE_TWEET[]
    """
    Delete a tweet
    """
    deleteTweet(id: ID!): Tweet
    # end::MUTATION_DELETE_TWEET[]

    # tag::MUTATION_MARK_TWEET_READ[]
    """
    Mark a tweet as read
    """
    markTweetRead(id: ID!): Boolean
    # end::MUTATION_MARK_TWEET_READ[]

    # tag::MUTATION_CREATE_MESSAGE[]
    """
    Create a new message example.
    """
    createMessage(input: MessageInput): Message
    # end::MUTATION_CREATE_MESSAGE[]
    #
    #
    #
    # tag::MUTATION_CREATE_MESSAGE[]
    """
    Create a new message example.

    @deprecated(reason: "Internal test")

    add.version: 1.0.0
    update.version: 1.2.3
    update.version: 2.0.5
    deprecated.version: 2.6.0
    removed.version: 2.7.8

    - `input` is the input message.
    """
    createMessageDep(input: MessageInput): Message
    # end::MUTATION_CREATE_MESSAGE[]
}
# end::MUTATIONs[]

# tag::graphql_directives[]
#
# this declares the directive as being possible on arguments and input fields
#
"""
Directive to specify the size constraints on arguments and input fields.

.Arguments:
- `min`: min the minimum size allowed, default is 0
- `max`: the maximum size allowed, default is 2147483647
- `message`: the validation message, default is "graphql.validation.Size.message"
"""
directive @Size(
    min: Int = 0
    max: Int! = 2147483647
    message: String = "graphql.validation.Size.message"
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"""
Directive to specify the length constraints on arguments and input fields.

.Arguments:
- `min`: the minimum length allowed, default is 0
- `max`: the maximum length allowed, default is 2147483647
- `message`: the validation message, default is "graphql.validation.Size.message"
"""
directive @length(
    min: Int = 0
    max: Int! = 2147483647
    message: String = "graphql.validation.Size.message"
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# end::graphql_directives[]
