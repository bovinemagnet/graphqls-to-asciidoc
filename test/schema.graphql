"""
A tweet
This schema came from an example found here https://github.com/marmelab/GraphQL-example/blob/master/schema.graphql
"""
type Tweet {
    """
    The tweet ID
    """
    id: ID!
    """
    The tweet text. No more than 140 characters!
    """
    body: String
    """
    When the tweet was published
    """
    date: Date
    """
    Who published the tweet
    """
    Author: User
    """
    Views, retweets, likes, etc
    """
    Stats: Stat
    """
    The tweet's sentiment
    """
    sentiment: Sentiment
    """
    This is to test the version number of this field.

    add.version: 1.0.0
    update.version: 1.2.3
    update.version: 2.0.5
    deprecated.version: 2.6.0
    removed.version: 2.7.8
    """
    newField: String
}

"""
A Twitter user. They can publish tweets, and have followers
"""
type User {
    """
    The user ID
    """
    id: ID!
    """
    The user's Twitter handle
    """
    username: String
    """
    The user's real name
    """
    first_name: String
    """
    The user's real name
    """
    last_name: String
    """
    The user's real full name
    """
    full_name: String
    """
    The user's name, that is deprecated
    """
    name: String @deprecated
    """
    The user's avatar URL
    """
    avatar_url: Url
}

"""
Stats about a tweet, such as number of views, likes, retweets, etc
"""
type Stat {
    """
    The number of views
    """
    views: Int
    """
    The number of likes
    """
    likes: Int
    """
    The number of retweets
    """
    retweets: Int
    """
    The number of responses
    """
    responses: Int
}

"""
A notification for a user
"""
type Notification {
    """
    The notification ID
    """
    id: ID
    """
    The notification date
    """
    date: Date
    """
    The notification type
    """
    type: String
}

"""
Meta information about the query
"""
type Meta {
    """
    The total number of items
    """
    count: Int
}

"""
An example of a type with a changelog in the type definition as well as on the fieds.

add.version: 1.0.0
update.version: 1.2.3
update.version: 2.0.5
"""
type CLogExample {
    """
    The total number of items
    """
    count: Int

    """
    This was updated
    """
    up: String

    """
    This was deprecated

    @deprecated("testing this out")

    add.version: 1.0.0
    update.version: 1.2.3
    deprecated.version: 2.6.0
    """
    dep: String

    """
    This was new

    add.version: 2.6.0
    """
    new: String
}

"""
A message
"""
type Message {
    """
    The message's content
    """
    content: String
    """
    The message's author
    """
    author: String
}

"""
Example of an input type
"""
input MessageInput {
    """
    The message's content
    """
    content: String @length(max: 31)
    """
    The message's author
    """
    author: String @length(max: 31)
}

"""
An example of a type with a changelog in the type definition as well as on the fieds.

add.version: 1.0.0
update.version: 1.2.3
update.version: 2.0.5
"""
input CLogExampleInput {
    """
    The total number of items
    """
    count: Int

    """
    This was updated
    """
    up: String

    """
    This was deprecated

    @deprecated("testing this out")

    add.version: 1.0.0
    update.version: 1.2.3
    deprecated.version: 2.6.0
    """
    dep: String

    """
    This was new

    add.version: 2.6.0
    """
    new: String
}

# tag::graphql_filter_dateFilter[]
"""
Defines an inclusive time window used to filter records (e.g. delta changes, events, logs) by their timestamps.

.Use Cases:
* **Delta queries**: clients can pass a `DateFilter` to `deltaChanges` (or similar endpoints) to retrieve only
those records whose timestamps fall between two instants.
* **Searches & reporting**: limit results to objects created, updated, or deleted within a specific date/time range.

.Behavior & Validation:
* Both `fromDateTime` and `toDateTime` are **inclusive**. Events occurring exactly at `fromDateTime` or `toDateTime`
should be included.
* `fromDateTime` **must be less than or equal to** `toDateTime`. If a client sends them in reverse order, the server
**should** respond with a validation error stating "fromDateTime must be less than or equal to `toDateTime`".
* Timestamps are expected in the **ISO-8601** format `YYYY-MM-DD'T'HH:mm:ss`.
* Because this input uses the scalar `LocalDateTime`, it does not carry a timezone offset.

.Example JSON representation (as a request payload in REST, or variables in GraphQL):
[source,json]
----
{
  "fromDateTime": "2025-01-01T00:00:00",
  "toDateTime":   "2025-01-01T23:59:59"
}
----
"""
input DateFilter {
    """
    .**Required:** Inclusive start or lower bound of the date/time window.
    * **Format:** ISO-8601 `YYYY-MM-DD'T'HH:mm:ss` (e.g. _2025-01-01T00:00:00_).
    * **Constraint:** Must be less than or equal to `toDateTime`.
    * Any event whose timestamp is exactly equal to `after` must be included in the result.

    .Validation:
    * If `after` is missing or not a valid ISO-8601 string, return a validation error: +
    `"Invalid ISO8601DateTime format for field 'after'."`

    .Examples:
    * `2025-05-01T00:00:00` (midnight UTC on May 1, 2025)
    * `2025-06-06T14:30:15`
    * `2025-06-06T00:00:00Z`
    * `2025-06-06T10:00:00+10:00`


    If this field is not strictly earlier than or equal to `toDateTime`, the server will reject the request.
    """
    fromDateTime: LocalDateTime!

    """
    .An explicit inclusive upper bound orr end of the date/time window.
    * **Format:** ISO-8601 YYYY-MM-DD'T'HH:mm:ss (e.g. 2025-05-31T23:59:59).
    * **Constraint:** Must be greater than or equal to `fromDateTime`.

    Example:
    • `2025-05-31T23:59:59` (one second before midnight UTC on May 31, 2025)

    If this field is not strictly later than or equal to fromDateTime, the server will reject the request.
    """
    toDateTime: LocalDateTime!
}
# end::graphql_filter_dateFilter[]

"""
# tag::SCALAR_URL_DES[]
A URL string scalar
# end::SCALAR_URL_DES[]
"""
scalar Url

"""
# tag::SCALAR_DATE_DES[]
A date string scalar
# end::SCALAR_DATE_DES[]
"""
scalar Date

# tag::graphql_scalars_ISO8601DateTime[]
"""
A custom scalar that enforces full ISO-8601 date‐time strings with time‐zone offsets.

.Example values:
* "2025-06-06T00:00:00Z"
* "2025-06-06T14:30:45+10:00"
* "2025-06-06T18:15:00-05:00"
Internally, this should map to something like java.time.OffsetDateTime
 or java.time.Instant (if you normalize to UTC on parse).
"""
scalar ISO8601DateTime
# end::graphql_scalars_ISO8601DateTime[]

"""
# tag::SENTIMENT_DES[]
A sentiment enum

.Values
- `HAPPY`: A happy one
- `SAD`: A sad one
- `INDIFFERENT`: An indifferent one
- `OTHER`: Something else

This is just to demonstrate how to document an enum with asciidoc tags in the description.

# end::SENTIMENT_DES[]
"""
enum Sentiment {
    """
    The tweet is happy.
    """
    HAPPY
    """
    The tweet is sad.
    """
    SAD
    """
    The tweet is indifferent.
    """
    INDIFFERENT
    """
    The tweet is something else.
    """
    OTHER
}

"""
# tag::ENUM_DIRECTION_DES[]

The direction UP or Down

# end::ENUM_DIRECTION_DES[]
"""
enum Direction {
    """
    The Up direction.
    """
    UP
    """
    The Down direction.
    """
    DOWN
}

# tag::graphql_enum_MutationMode[]
"""
The mode of the mutation.

The mutation can be either `synchronous` or `asynchronous`, depending on if the data requires further processing or not.
"""
enum MutationMode {
    "Synchronous"
    SYNC
    "Asynchronous"
    ASYNC
}
# end::graphql_enum_MutationMode[]

"""
The root query
"""
type Query {
    """
    [#get-tweet]
    Get a tweet by its ID

    This is the primary method for retrieving individual tweets.
    For bulk operations, see {ref:get-tweets}.

    .Arguments:
    - `id`: the id of the tweet to search by.
    """
    Tweet(id: ID!): Tweet

    """
    [get-tweets]
    Get a list of tweets, remember that it is `2024-01-08` for testing dates in the conversion.

    **Performance notes:**
    - Use pagination with `limit` and `skip` parameters
    - For single tweet access, use {link:get-tweet|the Tweet query}
    - See {ref:tweets-meta} for metadata about the collection


    **Arguments:**
    - `limit`:  the max numer; _Required_
    - `skip`: how many to skip
    - `sort_field`: what to sort on
    - `sort_order`: which direction to do you want to sort.
    - _RETURNS_: an array of `Tweet`.
    """
    Tweets(
        limit: Int!
        skip: Int
        sort_field: String
        sort_order: String
    ): [Tweet]

    """
    Get a list of tweets, remember that it is `2024-01-08` for testing dates in the conversion.

    - `limit`:  the max numer; _Required_
    - `skip`: how many to skip
    - `sort_field`: what to sort on
    - `sort_order`: which direction to do you want to sort.
    - _RETURNS_: an array of `Tweet`.
    """
    TweetsTwo(
        limit: Int!
        skip: Int
        sort_field: String
        sort_order: String
    ): [Tweet]

    """
    Get a list of tweets, remember that it is `2024-01-08` for testing dates in the conversion.

    **Random**
    - This is a random item, it is not at the end, so it can be in the description
    - So can this, it should not be in the arguments list.


    .Arguments:
    - `limit`:  the max numer; _Required_
    - `skip`: how many to skip
    - `sort_field`: what to sort on
    - `sort_order`: which direction to do you want to sort.
    - _RETURNS_: an array of `Tweet`.
    """
    TweetsThree(
        limit: Int!
        skip: Int
        sort_field: String
        sort_order: String
    ): [Tweet]

    """
    Get a list of tweets, remember that it is `2024-01-08` for testing dates in the conversion.

    **another**
    - Another list item 1
    - Another list item 2

    **This is just** bold stuff

    **this is cool**
    - Another list item z1
    - Another list item z2

    **Arguments:**
    - `limit`:  the max numer; _Required_
    - `skip`: how many to skip
    - `sort_field`: what to sort on
    - `sort_order`: which direction to do you want to sort.
    - _RETURNS_: an array of `Tweet`.
    """
    TweetsFour(
        limit: Int!
        skip: Int
        sort_field: String
        sort_order: String
    ): [Tweet]

    """
    [tweets-meta]
    Get meta information about the list of tweets. This tests the list to query options.

    This provides pagination and sorting metadata for {link:get-tweets|the Tweets query}.
    """
    TweetsMeta: Meta

    """
    Get a user by its ID
    """
    User(id: ID!): User
    """
    Get a list of users
    """
    Notifications(limit: Int): [Notification]
    """
    Get meta information about the list of notifications
    """
    NotificationsMeta: Meta
    """
    Get a tweet's sentiment by its ID
    """
    TweetSentiment(id: ID!): Sentiment

    """
    1: Get a tweet's sentiment by its IDs (plural)
    """
    TweetSentiments1(id: [ID]): [Sentiment]

    """
    2: Get a tweet's sentiment by its IDs (plural)
    """
    TweetSentiments2(id: [ID!]): [Sentiment]

    """
    3: Get a tweet's sentiment by its IDs (plural)
    """
    TweetSentiments3(id: [ID]!): [Sentiment]

    """
    4: Get a tweet's sentiment by its IDs (plural)
    """
    TweetSentiments4(id: [ID!]!): [Sentiment]

    # tag::graphql_query_tweetSentiments5[]
    """
    **INTERNAL**:

    An example of an internal query.

    - `id`: A list of id's that are _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentiments5(id: [ID!]!): [Sentiment]
    # end::graphql_query_tweetSentiments5[]

    # tag::graphql_query_tweetSentimentsDep[]
    """
    **INTERNAL**: Simple endpoint to test it is functioning.

    **PERMISSION**: PRIVATE-ONLY

    An example of an internal query.
    @deprecated(reason: "Internal test")
    - `id`: A list of id's that are _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentimentsDep(id: [ID!]!): [Sentiment]
    # end::graphql_query_tweetSentimentsDep[]
    #
    #
    # tag::graphql_query_tweetSentimentsCode[]
    """
    An example of an internal query with callouts.

    ```graphql
    query GetTweetSentiment {
      tweetSentimentCode(id: "123") { (1)
        sentiment (2)
        confidence // 3
      }
    }
    ```

    (1) Query the tweet sentiment endpoint with an ID
    (2) Get the sentiment value
    (3) Also retrieve confidence level

    @deprecated(reason: "Internal test")
    - `id`: An id that is _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentimentCode(id: ID!): Sentiment
    # end::graphql_query_tweetSentimentsCode[]

    # tag::graphql_query_tweetSentimentsACode[]
    """
    An example of an internal query.

    [source,graphql]
    ----
    tweetSentimentACode(123) {
       Sentiment
    }
    ----

    - `id`: An id that are _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentimentACode(id: ID!): Sentiment
    # end::graphql_query_tweetSentimentsACode[]

    # tag::graphql_query_tweetSentimentsDeprecate[]
    """
    An example of an internal query.

    @deprecated(reason: "Internal test")

    add.version: 1.0.0
    update.version: 1.2.3
    update.version: 2.0.5
    deprecated.version: 2.6.0
    removed.version: 2.7.8

    - `id`: An id that are _REQUIRED_
    - _RETURNS_ :  a list of Sentiments
    """
    tweetSentimentDep(id: ID!): Sentiment
    # end::graphql_query_tweetSentimentsDeprecate[]

    # tag::graphql_query_multiCalloutExample[]
    """
    Advanced query example with multiple callout styles.

    ```javascript
    // JavaScript client example
    const client = new GraphQLClient(endpoint); (1)

    const query = `
      query MultiExample($ids: [ID!]!) { // 2
        tweets: getTweets(ids: $ids) /* 3 */
          .map(tweet => tweet.sentiment) # 4
      }
    `;

    const result = await client.request(query, {
      ids: ["1", "2", "3"] (5)
    });
    ```

    **Callout explanations:**

    (1) Initialize the GraphQL client with endpoint
    (2) Define the parameterized query with required ID array
    (3) Fetch tweets using the provided IDs
    (4) Transform results to extract sentiment data
    (5) Pass the actual ID values as variables

    **NOTE**: This demonstrates all supported callout patterns in code blocks.
    """
    multiCalloutExample(ids: [ID!]!): [Sentiment]
    # end::graphql_query_multiCalloutExample[]

    """
    Example query with table documentation.

    This endpoint supports various search parameters:

    | Parameter | Type | Required | Description |
    |-----------|------|----------|-------------|
    | query | String | Yes | Search term to match |
    | limit | Int | No | Maximum results (default: 20) |
    | offset | Int | No | Starting position (default: 0) |
    | sortBy | String | No | Field to sort by |

    **TIP**: Use the limit parameter to control response size.

    For more advanced queries, see {ref:advanced-search}.
    """
    searchTweets(
        query: String!
        limit: Int = 20
        offset: Int = 0
        sortBy: String
    ): [Tweet]

    """
    Configuration query that preserves existing AsciiDoc table formatting.

    Available configuration options:

    [options="header"]
    |===
    | Setting | Default | Description
    | timeout | 30s | Request timeout
    | retries | 3 | Max retry attempts
    | cache | true | Enable response caching
    |===

    **WARNING**: Changing these settings affects all API operations.
    """
    getConfig: String
}

# tag::MUTATIONs[]
"""
The root mutation
"""
type Mutation {
    # tag::MUTATION_CREATE_TWEET[]
    """
    Create a new tweet with validation.

    Example implementation pattern:

    ```python
    def create_tweet(body: str) -> Tweet:
        # Validate input # 1
        if not body or len(body) > 280: # 2
            raise ValidationError("Invalid tweet body")

        # Create tweet object (3)
        tweet = Tweet.create(
            body=body,
            author=current_user() /* 4 */
        )

        return tweet (5)
    ```

    # 1 - Always validate user input first
    # 2 - Check Twitter's character limit
    (3) Use the domain model to create the tweet
    /* 4 */ Get the authenticated user context
    (5) Return the newly created tweet
    """
    createTweet(body: String): Tweet
    # end::MUTATION_CREATE_TWEET[]

    # tag::MUTATION_DELETE_TWEET[]
    """
    Delete a tweet
    """
    deleteTweet(id: ID!): Tweet
    # end::MUTATION_DELETE_TWEET[]

    # tag::MUTATION_MARK_TWEET_READ[]
    """
    Mark a tweet as read
    """
    markTweetRead(id: ID!): Boolean
    # end::MUTATION_MARK_TWEET_READ[]

    # tag::MUTATION_CREATE_MESSAGE[]
    """
    Create a new message example.
    """
    createMessage(input: MessageInput): Message
    # end::MUTATION_CREATE_MESSAGE[]
    #
    #
    #
    # tag::MUTATION_CREATE_MESSAGE[]
    """
    Create a new message example.

    @deprecated(reason: "Internal test")

    add.version: 1.0.0
    update.version: 1.2.3
    update.version: 2.0.5
    deprecated.version: 2.6.0
    removed.version: 2.7.8

    - `input` is the input message.
    """
    createMessageDep(input: MessageInput): Message
    # end::MUTATION_CREATE_MESSAGE[]
    #
    #
    # tag::MUTATION_CREATE_MESSAGE_B[]
    """
    Create a new message example.

    @deprecated(reason: "Internal test B")

    add.version: 1.0.0
    update.version: 1.2.3
    update.version: 2.0.5
    deprecated.version: 2.6.0
    removed.version: 2.7.8

    - `input` is the input message.
    - _RETURNS_ the created message.
    """
    createMessageDepB(input: MessageInput): Message
    # end::MUTATION_CREATE_MESSAGE_B[]
}
# end::MUTATIONs[]

# tag::SUBSCRIPTIONs[]
"""
Some simple subscriptions to test the output.
"""
type Subscription {
    """
    Subscribe to a tweet by `id` and get updates when a comment is added.


     .Arguments:
     - `id`: the id of the tweet.
    """
    commentAdded(id: ID!): Tweet
}
# end::SUBSCRIPTIONs[]

# tag::graphql_directives[]
#
# this declares the directive as being possible on arguments and input fields
#
"""
Directive to specify the size constraints on arguments and input fields.

.Arguments:
- `min`: min the minimum size allowed, default is 0
- `max`: the maximum size allowed, default is 2147483647
- `message`: the validation message, default is "graphql.validation.Size.message"
"""
directive @Size(
    min: Int = 0
    max: Int! = 2147483647
    message: String = "graphql.validation.Size.message"
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | FIELD_DEFINITION

"""
Directive to specify the length constraints on arguments and input fields.

.Arguments:
- `min`: the minimum length allowed, default is 0
- `max`: the maximum length allowed, default is 2147483647
- `message`: the validation message, default is "graphql.validation.Size.message"
"""
directive @length(
    min: Int = 0
    max: Int! = 2147483647
    message: String = "graphql.validation.Size.message"
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# end::graphql_directives[]
